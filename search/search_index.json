{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-me","title":"About me","text":"<p>Howdy, I\u2019m Surendra (aka SuRu). I\u2019m a software engineer living in Helsinki, Finland.</p> <p>I am a fan of technology, programming, and entrepreneurship.</p> <p></p>"},{"location":"#some-of-my-tools","title":"Some of my tools","text":"<ul> <li> boring-devtools</li> <li> insomnia-plugin-fake</li> <li> commentgen</li> <li> EAN generator and validator</li> <li> maven version comparator</li> <li> maven version comparator</li> </ul>"},{"location":"mac/","title":"MacOS tips and tricks","text":""},{"location":"mac/#showhide-the-hidden-files","title":"Show/hide the hidden files","text":""},{"location":"mac/#temporary-keyboard-shortcut-to-toggle","title":"Temporary keyboard shortcut to toggle","text":"<p>Cmd+Shift+.</p>"},{"location":"mac/#always-show-or-hide","title":"Always show or hide","text":"<pre><code># To show\ndefaults write com.apple.finder AppleShowAllFiles TRUE\n\n# To hide\ndefaults write com.apple.finder AppleShowAllFiles FALSE\n\n# Restart Finder after that\nkillall Finder\n</code></pre>"},{"location":"mac/#add-space-to-dock","title":"Add space to dock","text":"<pre><code>defaults write com.apple.dock persistent-apps -array-add '{\"tile-type\"=\"small-spacer-tile\";}'; killall Dock\n</code></pre>"},{"location":"mac/#screenshot","title":"Screenshot","text":"<p>Restart <code>SystemUIServer</code> after below changes</p> <pre><code>killall SystemUIServer\n</code></pre>"},{"location":"mac/#change-default-location","title":"Change default location","text":"<pre><code>defaults write com.apple.screencapture location ~/Desktop/screenshots\n</code></pre>"},{"location":"mac/#change-default-name","title":"Change default name","text":"<pre><code>defaults write com.apple.screencapture name \"name\"\n</code></pre>"},{"location":"mac/#delete-all-executable-files-in-command-line","title":"Delete all executable files in command line","text":"<pre><code>find . -maxdepth 1 -perm -111 -delete\n</code></pre>"},{"location":"mac/#list-all-apps-installed-from-app-store","title":"List all apps installed from App Store","text":"<pre><code>find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print | sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'\n</code></pre>"},{"location":"mac/#remove-shadow-from-window-screenshot","title":"Remove shadow from window screenshot","text":"<pre><code>defaults write com.apple.screencapture disable-shadow -bool true ; killall SystemUIServer\n</code></pre>"},{"location":"developer/postgres/","title":"Postgres Installation","text":"From binaries MacOS homebrew From source <p> and install binaries from here</p> <pre><code>brew install postgresql\n</code></pre>  Download zip Checkout from git repo <p> the source zip from here <pre><code># Extract the source\ntar -xvzf postgresql-&lt;VERSION&gt;.tar.gz\ncd postgresql-&lt;VERSION&gt;\n</code></pre></p> <p>Check the tags from here <pre><code># Clone the repo (assume you are in ~/dev)\ngit clone --depth 1 -b &lt;TAG&gt; https://git.postgresql.org/git/postgresql.git\ncd postgresql\n</code></pre></p> <p>Make and Install <pre><code># Check openssl\nwhich openssl\n\nSSL_DIR=\"&lt;ssl libs dir&gt;\" \n# for home brew you can get it using `brew --prefix openssl@1.1` \n\n# Configure the build\n./configure --with-openssl \\\n  --with-includes=${SSL_DIR}/include \\\n  --with-libraries=${SSL_DIR}/lib \\\n  --prefix $HOME/dev/postgres/pgsql\n\n# Make\nmake world\n\n# Install\nmake install \n</code></pre></p>"},{"location":"developer/postgres/#configuration","title":"Configuration","text":"<p>Create <code>~/dev/postgres</code> and <code>~/dev/postgres/pgdata</code></p>"},{"location":"developer/postgres/#env-variables-and-aliases","title":"env variables and aliases","text":"Postgres config<pre><code>export PG_HOME=\"$HOME/dev/postgres\"\nexport PG_LOG_FILE=\"$PG_HOME/postgres.log\"\nexport PG_DATA=\"$PG_HOME/pgdata\"\n\nexport PATH=\"$PG_HOME/pgsql/bin:$PATH\" # (1)\n\nalias start_postgres=\"pg_ctl -D ${PG_DATA} -l ${PG_LOG_FILE} start\"\nalias stop_postgres=\"pg_ctl -D ${PG_DATA} -l ${PG_LOG_FILE} stop\"\n</code></pre> <ol> <li> not required for homebrew installation</li> </ol>"},{"location":"developer/postgres/#initdb-create-database-folder-structure","title":"InitDB (create database folder structure)","text":"<pre><code>initdb ${PG_DATA}\n</code></pre>"},{"location":"developer/postgres/#create-userrole","title":"Create user/role","text":"<pre><code>createuser --interactive --pwprompt\n</code></pre>"},{"location":"developer/postgres/#create-database","title":"Create database","text":"<pre><code>createdb -O &lt;user_name&gt; &lt;db_name&gt;\n</code></pre>"},{"location":"developer/postgres/#login-to-database","title":"Login to database","text":"<pre><code>psql -U &lt;user_name&gt; -d &lt;database&gt; [-h &lt;host&gt;] [-p &lt;port&gt;] -a\n</code></pre>"},{"location":"developer/python/","title":"Python","text":""},{"location":"developer/python/#pip-install-from-git","title":"pip install from git","text":"<pre><code># from commit\npip install git+git://github.com/aladagemre/django-notification.git@2927346f4c513a217ac8ad076e494dd1adbf70e1\n\n# from branch\npip install git+git://github.com/aladagemre/django-notification.git@cool-feature-branch\n\n# from branch source bundle\npip install https://github.com/aladagemre/django-notification/archive/cool-feature-branch.tar.gz\n\n# from tag\npip install git+git://github.com/aladagemre/django-notification.git@v2.1.0\n\n# from tag source bundle\npip install https://github.com/aladagemre/django-notification/archive/v2.1.0.tar.gz\n</code></pre>"},{"location":"developer/python/#update-all-python-packages","title":"Update all python packages","text":"<pre><code>pip3 list --format=freeze | cut -d'=' -f 1 | xargs -n1 pip3 install --upgrade\n</code></pre>"},{"location":"developer/python/#create-virtual-env","title":"Create virtual env","text":"<pre><code>python3 -m venv .venv\n</code></pre>"},{"location":"developer/rust/","title":"Rust tools setup","text":"<p>Original installation instructions for all operating systems</p>"},{"location":"developer/rust/#macos-homebrew","title":"MacOS Homebrew","text":"<pre><code>brew install rustup-init\n\n# run `rustup-init`\n# It will install rustc and cargo\n</code></pre>"},{"location":"developer/rust/#rust-documentation","title":"Rust documentation","text":"<pre><code>rustup doc\n</code></pre>"},{"location":"developer/rust/#to-update-tool-chain","title":"To update tool chain","text":"<pre><code>rustup update\n</code></pre>"},{"location":"developer/rust/#to-create-a-new-project","title":"To create a new project","text":"<pre><code># For binary project\ncargo new --bin &lt;project_name&gt;\n\n# For library project\ncargo new --lib &lt;library_name&gt;\n</code></pre>"},{"location":"developer/rust/#to-compile","title":"To compile","text":"<pre><code># To compile and run at the same time\ncargo run\n\n# For development/debug build\ncargo build\n\n# For release build\ncargo build --release\n</code></pre>"},{"location":"developer/rust/#idiomatic-rust-check","title":"Idiomatic rust check","text":"<pre><code>cargo clippy\n</code></pre>"},{"location":"developer/ssh-key/","title":"SSH Key","text":""},{"location":"developer/ssh-key/#generate-ssh-key","title":"Generate SSH key","text":"in ~/.ssh directory<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>If you are using a legacy system that doesn't support the Ed25519 algorithm, use:</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre>"},{"location":"developer/ssh-key/#ensure-the-ssh-agent-is-running","title":"Ensure the ssh-agent is running","text":"<pre><code>eval \"$(ssh-agent -s)\"\n\n## Agent pid 60501\n</code></pre>"},{"location":"developer/ssh-key/#create-ssh-config-file","title":"Create SSH config file","text":"~/.ssh/config<pre><code>Host *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n</code></pre>"},{"location":"developer/ssh-key/#add-key","title":"Add key","text":"MacOS Windows/ Linux <pre><code>ssh-add --apple-use-keychain ~/.ssh/id_ed25519\n</code></pre> <p>For older versions of MacOS</p> <pre><code>ssh-add -K ~/.ssh/id_ed25519\n</code></pre> <pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre>"},{"location":"developer/git/rewrite-commit-messages/","title":"Rewrite git commit messages","text":"<pre><code>git rebase --interactive commit_hash^\n</code></pre> <ul> <li>Using <code>vi/vim</code> you change the words <code>pick</code> to <code>reword</code> for the commits you want to change, save and <code>quit(:wq)</code>.</li> <li>Then git will prompt you with each commit that you marked as reword, so you can change the commit message.</li> <li>Each commit message you have to save and <code>quit(:wq)</code> to go to the next commit message</li> </ul>"},{"location":"developer/git/rewrite-history/","title":"Rewrite history","text":""},{"location":"developer/git/rewrite-history/#check-list-of-authors","title":"Check list of authors","text":"<pre><code>git log --pretty=full | grep  -E '(Author|Commit): (.*)$' | sed 's/Author: //g' | sed 's/Commit: //g' | sort -u\n</code></pre>"},{"location":"developer/git/rewrite-history/#change-history","title":"Change history","text":"<pre><code>git filter-branch --env-filter '\n    if [ \"$GIT_COMMITTER_EMAIL\" = \"&lt;OLD AUTHOR EMAIL - 1&gt;\" ]; then\n        export GIT_COMMITTER_NAME=\"&lt;NEW AUTHOR NAME&gt;\"\n        export GIT_COMMITTER_EMAIL=\"&lt;NEW AUTHOR EMAIL&gt;\"\n    fi\n    if [ \"$GIT_COMMITTER_EMAIL\" = \"&lt;OLD AUTHOR EMAIL - 2 ... &gt;\" ]; then\n        export GIT_COMMITTER_NAME=\"&lt;NEW AUTHOR NAME&gt;\"\n        export GIT_COMMITTER_EMAIL=\"&lt;NEW AUTHOR EMAIL&gt;\"\n    fi\n' --tag-name-filter cat -f -- --all\n</code></pre>"},{"location":"developer/git/rewrite-history/#push-the-code","title":"Push the code","text":"<pre><code>git push --force --tags origin 'refs/heads/*'\n</code></pre>"},{"location":"developer/git/tweaks/","title":"Tweaks","text":""},{"location":"developer/git/tweaks/#get-a-list-of-all-commit-messages-for-a-repo","title":"get a list of all commit messages for a repo","text":"<pre><code>git log --pretty=format:'%s'\n</code></pre>"},{"location":"developer/git/tweaks/#find-the-nearest-parent-branch-of-the-current-git-branch","title":"find the nearest parent branch of the current git branch","text":"<pre><code>git show-branch -a | grep '\\*' | grep -v `git rev-parse --abbrev-ref HEAD` | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//'\n</code></pre>"},{"location":"developer/git/tweaks/#push-changes-to-an-empty-git-repository-for-the-first-time","title":"push changes to an empty git repository for the first time","text":"<pre><code>git push --set-upstream origin master\n</code></pre>"},{"location":"developer/git/tweaks/#delete-first-10-branches-of-remote-excluding-master","title":"delete first 10 branches of remote excluding master","text":"<pre><code>git branch -a | grep \"remotes/origin\" | grep -v master | sed 's/^[ *]*//' | sed 's/remotes\\/origin\\///' | head -n10 | sed 's/^/git push origin :/'\n</code></pre>"},{"location":"developer/git/tweaks/#remove-and-from-start-of-diff-lines","title":"Remove + and - from start of diff lines","text":"<pre><code>git diff --color | sed \"s/^\\([^-+ ]*\\)[-+ ]/\\\\1/\" | less -r\n</code></pre>"},{"location":"developer/git/tweaks/#clear-out-git-hooks","title":"clear out git hooks","text":"<pre><code>find .git/hooks -type l -exec rm {} \\; &amp;&amp; find .githooks -type f -exec ln -sf ../../{} .git/hooks/ \\;\n</code></pre>"},{"location":"developer/git/tweaks/#remove-untracked-files-in-a-git-repository","title":"remove untracked files in a git repository","text":"<pre><code>git status -su | cut -d' ' -f2- | tr '\\n' '\\0' | xargs -0 rm\n</code></pre>"},{"location":"developer/git/tweaks/#get-most-modified-files-and-counts","title":"get most modified files and counts","text":"<pre><code>git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\\tfile\"} {print $1 \"\\t\" $2}' | sort -g\n</code></pre>"},{"location":"developer/git/tweaks/#locally-checkout-all-remote-branches-of-a-repository","title":"Locally checkout all remote branches of a repository","text":"<pre><code>git branch -r | cut -d '/' -f2 | grep -Ev '( |master)' | xargs -Ibranch git checkout -b branch origin/branch\n</code></pre>"},{"location":"developer/git/tweaks/#open-current-git-repository-url","title":"Open current Git repository URL","text":"<pre><code>open `git remote -v | awk '/fetch/{print $2}' | sed -Ee 's##(git@|git://)##http://##' -e 's@com:@com/@'`| head -n1\n</code></pre>"},{"location":"developer/git/tweaks/#remove-git-from-current-project","title":"Remove Git from current project","text":"<pre><code>find . -name '.git' -exec rm -rf {} \\;\n</code></pre>"},{"location":"developer/git/tweaks/#remove-all-new-files","title":"Remove all new files","text":"<pre><code>for file in $(git status | grep \"new file\" | sed \"s/##\\tnew file://\"); do git rm --cached $file; done\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-remote-branches","title":"Delete all remote branches","text":"<pre><code>for remote_branch in $(git ls-remote); do if [[ $remote_branch =~ .*(feature/MAGENTA-([0-9|^130]).+).* ]]; then git push origin :${BASH_REMATCH[1]}; fi; done\n</code></pre>"},{"location":"developer/git/tweaks/#removes-all-local-branch","title":"Removes all local branch","text":"<pre><code>for branch in $(git branch | grep \"feature/MAGENTA-\"); do git branch -D $branch; done\n</code></pre>"},{"location":"developer/git/tweaks/#get-list-of-followers-from-github-username","title":"get list of followers from github username","text":"<pre><code>curl -s https://api.github.com/users/username/followers | grep '\\\"login\\\"' | sed -e's/[,|\"|:]//g' | awk '{print $(NF)}' | sort\n</code></pre>"},{"location":"developer/git/tweaks/#git-commit-random-alias","title":"git commit random alias","text":"<pre><code>git config --global alias.commit-random '!git commit -m \"$(curl -s http://whatthecommit.com/index.txt)\"'\n\nusage: git commit-random\n</code></pre>"},{"location":"developer/git/tweaks/#get-list-of-users-public-repos","title":"get list of users public repos","text":"<pre><code>curl \"https://api.github.com/users/usernamehere/repos?type=owner&amp;sort=updated\" -s | sed -En 's|\"name\": \"(.+)\",|\\1|p' | tr -d ' '\n</code></pre>"},{"location":"developer/git/tweaks/#count-relevant-lines-of-shell-code-in-a-git-repo","title":"count relevant lines of shell code in a git repo","text":"<pre><code>egrep -v '^\\s*($|##)' $(git grep -l '##!/bin/.*sh' *) | wc -l\n</code></pre>"},{"location":"developer/git/tweaks/#push-all-remotes","title":"push all remotes","text":"<pre><code>for i in `git remote`; do git push $i; done;\n</code></pre>"},{"location":"developer/git/tweaks/#cherry-pick-range-of-commits-starting-from-the-tip-of-master-into-preview-branch","title":"cherry-pick range of commits, starting from the tip of 'master', into 'preview' branch","text":"<pre><code>git rev-list --reverse --topo-order master... | while read rev; do git checkout preview; git cherry-pick $rev || break; done\n</code></pre>"},{"location":"developer/git/tweaks/#create-tracking-branches-for-all-remote-branches","title":"create tracking branches for all remote branches","text":"<pre><code>git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\\*?\\s*||; if (m|(.+)/(.+)| &amp;&amp; not $d{$2}) {print qq(git branch --track $2 $1/$2\\n)} else {$d{$_}=1}' | csh -xfs;\n</code></pre>"},{"location":"developer/git/tweaks/#git-reset-newly-added-files","title":"git reset newly added files","text":"<pre><code>for f in `git status | grep new | awk '{print $3}'`; do git reset HEAD $f ; done\n</code></pre>"},{"location":"developer/git/tweaks/#git-reset-newly-added-files_1","title":"git reset newly added files","text":"<pre><code>git reset HEAD -- $(git status | awk '/new file:/{print $3}')\n</code></pre>"},{"location":"developer/git/tweaks/#pull-latest-of-all-submodules","title":"pull latest of all submodules","text":"<pre><code>git submodule foreach git pull origin master\n</code></pre>"},{"location":"developer/git/tweaks/#show-a-git-log-with-offsets-relative-to-head","title":"show a git log with offsets relative to HEAD","text":"<pre><code>git log --oneline | nl -v0 | sed 's/^ \\+/&amp;HEAD~/'\n</code></pre>"},{"location":"developer/git/tweaks/#list-offsets-from-head-with-git-log","title":"list offsets from HEAD with git log","text":"<pre><code>o=0; git log --oneline | while read l; do printf \"%+9s %s\\n\" \"HEAD~${o}\" \"$l\"; o=$(($o+1)); done | less\n</code></pre>"},{"location":"developer/git/tweaks/#diff-the-last-2-commits","title":"diff the last 2 commits","text":"<pre><code>git diff $(git log --pretty=format:%h -2 --reverse | tr \"\\n\" \" \")\n</code></pre>"},{"location":"developer/git/tweaks/#reset-the-last-modified-time-for-each-file-in-a-git-repo-to-its-last-commit-time","title":"reset the last modified time for each file in a git repo to its last commit time","text":"<pre><code>git ls-files | while read file; do echo $file; touch -d $(git log --date=local -1 --format=\"@%ct\" \"$file\") \"$file\"; done\n</code></pre>"},{"location":"developer/git/tweaks/#get-author-and-email-of-a-commit","title":"get author and email of a commit","text":"<pre><code>git --no-pager show -s --format='%an &lt;%ae&gt; on %cd' --date=short {commithash}\n</code></pre>"},{"location":"developer/git/tweaks/#information-about-an-author-by-giving-its-name-or-email","title":"information about an author by giving it's name or email","text":"<pre><code>git log -i -1 --pretty=\"format:%an &lt;%ae&gt;\\n\" --author=\"$1\"\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-files-ever-existed","title":"List all files ever existed","text":"<pre><code>git log --pretty=format: --name-status $@ | cut -f2- | sort -u\n</code></pre>"},{"location":"developer/git/tweaks/#commit-all-changes","title":"commit all changes","text":"<pre><code>git add -A &amp;&amp; git commit -av\n</code></pre>"},{"location":"developer/git/tweaks/#print-git-commit-history","title":"print git commit history","text":"<pre><code>git log --oneline --decorate | nl | sort -nr | nl | sort -nr | cut --fields=1,3 | sed 's/([^)]*)\\s//g'\n</code></pre>"},{"location":"developer/git/tweaks/#print-git-commit-history_1","title":"print git commit history","text":"<pre><code>git log --oneline --decorate | tac | nl | tac | sed 's/([^)]*)\\s//g'\n</code></pre>"},{"location":"developer/git/tweaks/#find-the-date-of-the-first-commit-in-a-repo","title":"find the date of the first commit in a repo","text":"<pre><code>git log --pretty=format:'%ad' | tail -1\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-local-git-branches-that-have-been-merged","title":"delete all local git branches that have been merged","text":"<pre><code>git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-git-branches-except-master","title":"delete all git branches except master","text":"<pre><code>git branch | egrep -v ^master$ | sed 's/^[ *]*//' | sed 's/^/git branch -D /' | bash\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-git-branches-except-master_1","title":"delete all git branches except master","text":"<pre><code>git branch | grep -v \"master\" | sed 's/^[ *]*//' | sed 's/^/git branch -D /' | bash\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-git-branches-except-master_2","title":"delete all git branches except master","text":"<pre><code>git checkout master; git branch | sed -e '/master/d' -e 's/^/git branch -D /' | bash\n</code></pre>"},{"location":"developer/git/tweaks/#export-current-repo-to-zip-archive","title":"export current repo to zip archive","text":"<pre><code>git archive -o \"${PWD####*/}.zip\" HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#figure-out-what-pull-requests-are-in-your-current-branch-staging-but-not-yet-in-master","title":"figure out what pull requests are in your current branch (staging) but not yet in master","text":"<pre><code>git log HEAD...origin/master --pretty=oneline | grep pull\n</code></pre>"},{"location":"developer/git/tweaks/#remove-missing-files","title":"remove missing files","text":"<pre><code>git ls-files -d -z | xargs -0 git update-index --remove\n</code></pre>"},{"location":"developer/git/tweaks/#list-authors-of-a-repo","title":"list authors of a repo","text":"<pre><code>git shortlog -sn --all | cut -f2 | cut -f1 -d' '\n</code></pre>"},{"location":"developer/git/tweaks/#remove-file-from-repo-history","title":"remove file from repo history","text":"<pre><code>git filter-branch -f --tree-filter  'rm -rf filename.py' HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#list-repos-by-username","title":"list repos by username","text":"<pre><code>curl \"https://api.github.com/users/username/repos?type=owner&amp;sort=updated\" -s | sed -En 's|\"name\": \"(.+)\",|\\1|p' | awk '{print $1}'\n</code></pre>"},{"location":"developer/git/tweaks/#fetch-all-git-remotes-for-a-repo","title":"fetch all git remotes for a repo","text":"<pre><code>git branch -r | awk -F'/' '{print \"git fetch \"$1,$2}' | xargs -I {} sh -c {}\n</code></pre>"},{"location":"developer/git/tweaks/#add-a-tag","title":"add a tag","text":"<pre><code>git tag -a 1.2 -m \"Version 1.2 Stable\"\n</code></pre>"},{"location":"developer/git/tweaks/#show-which-branches-are-tracking-what","title":"show which branches are tracking what","text":"<pre><code>git for-each-ref --format='%(refname:short)' refs/heads/* | while read b; do if r=$(git config --get branch.$b.remote); then m=$(git config --get branch.$b.merge); echo \"$b -&gt; $r/${m####*/}\"; fi; done\n</code></pre>"},{"location":"developer/git/tweaks/#push-tags","title":"push tags","text":"<pre><code>git push --tags\n</code></pre>"},{"location":"developer/git/tweaks/#download-all-files-from-a-gist-without-git","title":"download all files from a gist without git","text":"<pre><code>curl -L https://gist.github.com/username/gistid/download | tar -xvz --strip-components=1\n</code></pre>"},{"location":"developer/git/tweaks/#delete-a-local-branch","title":"delete a local branch","text":"<pre><code>git branch -d branchname\n</code></pre>"},{"location":"developer/git/tweaks/#delete-a-remote-branch","title":"delete a remote branch","text":"<pre><code>git push origin --delete branchname\n</code></pre>"},{"location":"developer/git/tweaks/#list-props-for-repo","title":"list props for repo","text":"<pre><code>git log -i --grep props | egrep -io 'props (to )?[a-z0-9_\\-]*' | sed 's/.* //' | sort | uniq -c | sort -k1nr\n</code></pre>"},{"location":"developer/git/tweaks/#undo-your-last-commit-but-dont-throw-away-your-changes","title":"Undo your last commit, but don't throw away your changes","text":"<pre><code>git reset --soft HEAD^\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-local-branches-that-have-been-merged-into-head","title":"Delete all local branches that have been merged into HEAD","text":"<pre><code>git branch -d `git branch --merged | grep -v '^*' | grep -v 'master' | tr -d '\\n'`\n</code></pre>"},{"location":"developer/git/tweaks/#credit-author-on-last-commit","title":"credit author on last commit","text":"<pre><code>git commit --amend --author \"$1 &lt;$2&gt;\" -C HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#show-the-diff-of-everything-you-havent-pushed-yet","title":"Show the diff of everything you haven't pushed yet.","text":"<pre><code>branch=$(git rev-parse --abbrev-ref HEAD) git diff origin/$branch..HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#determine-current-branch","title":"determine current branch","text":"<pre><code>git branch | awk '/\\*/{print $2}'\n</code></pre>"},{"location":"developer/git/tweaks/#check-which-branches-had-the-latest-commits","title":"check which branches had the latest commits","text":"<pre><code>git for-each-ref --sort=-committerdate --format='%(refname:short) %(committerdate:short)'\n</code></pre>"},{"location":"developer/git/tweaks/#search-all-commit-messages-for-a-string","title":"search all commit messages for a string","text":"<pre><code>git rev-list --all | xargs git grep -F 'string'\n</code></pre>"},{"location":"developer/git/tweaks/#create-a-gitio-short-url","title":"create a git.io short url","text":"<pre><code>curl -s -F \"url=http://github.com/twitter\" -i http://git.io | sed -n 's/Location:.* //p'\n</code></pre>"},{"location":"developer/git/tweaks/#find-the-most-verbs-used-in-commit-messages","title":"find the most verbs used in commit messages","text":"<pre><code>git log --pretty=format:'%s' | cut -d \" \" -f 1 | sort | uniq -c | sort -nr\n</code></pre>"},{"location":"developer/git/tweaks/#find-the-most-verbs-used-in-commit-messages_1","title":"find the most verbs used in commit messages","text":"<pre><code>git log --oneline | awk '{ print $2; }' | sort | uniq -c | sort -r\n</code></pre>"},{"location":"developer/git/tweaks/#get-current-author-and-email-of-the-repo","title":"get current author and email of the repo","text":"<pre><code>git log -1 --pretty=\"format:%an &lt;%ae&gt;\" --author=\"$1\"\n</code></pre>"},{"location":"developer/git/tweaks/#verify-all-packed-objects-and-find-the-5-biggest-ones","title":"verify all packed objects and find the 5 biggest ones","text":"<pre><code>git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-tags","title":"delete all tags","text":"<pre><code>for t in `git tag` do; git push origin :$t; git tag -d $t; done\n</code></pre>"},{"location":"developer/git/tweaks/#compress-all-repos","title":"compress all repos","text":"<pre><code>find . -path '*.git/config' -execdir git gc --aggressive \\;\n</code></pre>"},{"location":"developer/git/tweaks/#remove-ds_store-from-the-repository-you-happen-to-staging-by-mistake","title":"remove .DS_Store from the repository you happen to staging by mistake","text":"<pre><code>find . -name .DS_Store -exec git rm --ignore-unmatch --cached {} +\n</code></pre>"},{"location":"developer/git/tweaks/#delete-all-local-branches-that-have-been-merged-into-head_1","title":"Delete all local branches that have been merged into HEAD.","text":"<pre><code>git branch -d `git branch --merged | grep -v '^*' | grep -v 'master' | tr -d '\\n'`\n</code></pre>"},{"location":"developer/git/tweaks/#credit-an-author-on-the-last-commit","title":"Credit an author on the last commit","text":"<pre><code>git commit --amend --author \"John Doe &lt;john@doe.com&gt;\" -C HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#pretty-git-log","title":"pretty git log","text":"<pre><code>git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative\n</code></pre>"},{"location":"developer/git/tweaks/#delete-local-files-that-have-been-removed-from-git-repo","title":"delete local files that have been removed from git repo","text":"<pre><code>git status | grep deleted | awk '{\\$1=\\$2=\\\"\\\"; print \\$0}' | perl -pe 's/^[ \\t]*//' | sed 's/ /\\\\\\\\ /g' | xargs git rm\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-files-ever-added-to-a-git-repo","title":"list all files ever added to a git repo","text":"<pre><code>git log --name-status --oneline --all | grep -P \"^[A|M|D]\\s\" | awk '{print $2}' | sort | uniq\n</code></pre>"},{"location":"developer/git/tweaks/#get-current-branch","title":"get current branch","text":"<pre><code>git branch | grep \"^*\" | sed 's/* //g'\n</code></pre>"},{"location":"developer/git/tweaks/#stage-manually-deleted-files","title":"stage manually deleted files","text":"<pre><code>git status | grep deleted | sed 's/deleted://g' | sed 's/[##| ]//g' | xargs git rm\n</code></pre>"},{"location":"developer/git/tweaks/#show-path-to-the-root-of-the-repo","title":"show path to the root of the repo","text":"<pre><code>git rev-parse --show-toplevel\n</code></pre>"},{"location":"developer/git/tweaks/#recommit-last-commit","title":"recommit last commit","text":"<pre><code>LAST_MESSAGE=`git log -1 --pretty=\"format:%s\"`; git commit -m \"$LAST_MESSAGE\" --amend --date \"`date`\"\n</code></pre>"},{"location":"developer/git/tweaks/#get-a-list-of-all-todofixme-tasks-left-to-be-done-in-your-project","title":"Get a list of all TODO/FIXME tasks left to be done in your project","text":"<pre><code>alias tasks='grep --exclude-dir=.git -rEI \"TODO|FIXME\" . 2&gt;/dev/null'\n</code></pre>"},{"location":"developer/git/tweaks/#edit-your-gitignore-from-anywhere-in-your-repo","title":"edit your gitignore from anywhere in your repo","text":"<pre><code>vim $(git rev-parse --show-toplevel)/.gitignore\n</code></pre>"},{"location":"developer/git/tweaks/#simple-single-lined-git-log","title":"simple single-lined git log","text":"<pre><code>git log --pretty=oneline --abbrev-commit\n</code></pre>"},{"location":"developer/git/tweaks/#lint-git-unstaged-php-files","title":"Lint Git unstaged PHP files","text":"<pre><code>git status -s | grep -o ' \\S*php$' | while read f; do php -l $f; done\n</code></pre>"},{"location":"developer/git/tweaks/#100-rollback-files-to-a-specific-revision","title":"100% rollback files to a specific revision","text":"<pre><code>git reset --hard &lt;commidId&gt; &amp;&amp; git clean -f\n</code></pre>"},{"location":"developer/git/tweaks/#print-out-the-contents-of-a-git-repository-useful-for-broken-repositories","title":"Print out the contents of a Git repository (useful for broken repositories)","text":"<pre><code>find .git/objects -type f -printf \"%P\\n\" | sed s,/,, | while read object; do echo \"=== $obj $(git cat-file -t $object) ===\"; git cat-file -p $object; done\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-branches-by-date-useful-for-showing-active-branches","title":"Show git branches by date - useful for showing active branches","text":"<pre><code>git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--'\n</code></pre>"},{"location":"developer/git/tweaks/#git-log-with-color-and-path","title":"git log with color and path","text":"<pre><code>alias gitlog='git log -10 --graph --date-order -C -M --pretty=format:\"%C(yellow)%h%C(reset) - %C(bold green)%ad%C(reset) - %C(dim yellow)%an%C(reset) %C(bold red)&gt;%C(reset) %C(white)%s%C(reset) %C(bold red)%d%C(reset) \" --abbrev-commit --date=short'\n</code></pre>"},{"location":"developer/git/tweaks/#open-in-vim-all-modified-files-in-a-git-repository","title":"open (in vim) all modified files in a git repository","text":"<pre><code>git status --porcelain | sed -ne 's/^ M //p' | tr '\\n' '\\0' | tr -d '\"' | xargs -0 vim\n</code></pre>"},{"location":"developer/git/tweaks/#open-in-vim-all-modified-files-in-a-git-repository_1","title":"open (in vim) all modified files in a git repository","text":"<pre><code>vim `git status --porcelain | sed -ne 's/^ M //p'`\n</code></pre>"},{"location":"developer/git/tweaks/#open-in-vim-all-modified-files-in-a-git-repository_2","title":"open (in vim) all modified files in a git repository","text":"<pre><code>vim `git status | grep modified | awk '{print $3}'`\n</code></pre>"},{"location":"developer/git/tweaks/#open-in-vim-all-modified-files-in-a-git-repository_3","title":"open (in vim) all modified files in a git repository","text":"<pre><code>vim -p `git --porcelain | awk {print $2}`\n</code></pre>"},{"location":"developer/git/tweaks/#stage-all-manually-deleted-files","title":"stage all manually deleted files","text":"<pre><code>for x in `git status | grep deleted | awk '{print $3}'`; do git rm $x; done\n</code></pre>"},{"location":"developer/git/tweaks/#generate-file-list-modified-since-last-commit-and-export-to-tar-file","title":"generate file list modified since last commit and export to tar file","text":"<pre><code>git diff-tree -z -r --no-commit-id --name-only --diff-filter=ACMRT COMMID_HASH | xargs -0 tar -rf list.tar\n</code></pre>"},{"location":"developer/git/tweaks/#export-unpushed-files-list","title":"export unpushed files list","text":"<pre><code>git log -z origin/master..master --name-only --pretty=\"format:\" | sort -zu | xargs -0 tar -rf list.tar\n</code></pre>"},{"location":"developer/git/tweaks/#count-the-lines-of-each-file-extenion-in-a-list-of-files","title":"Count the lines of each file extenion in a list of files","text":"<pre><code>git ls-files | xargs wc -l | awk -F ' +|\\\\.|/' '{ sumlines[$NF] += $2 } END { for (ext in sumlines) print ext, sumlines[ext] }'\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-commit-history","title":"Show git commit history","text":"<pre><code>git reflog show | grep '}: commit' | nl | sort -nr | nl | sort -nr | cut --fields=1,3 | sed s/commit://g | sed -e 's/HEAD*@{[0-9]*}://g'\n</code></pre>"},{"location":"developer/git/tweaks/#restore-deleted-file-from-git-repository","title":"Restore deleted file from GIT repository","text":"<pre><code>git checkout $(git rev-list -n 1 HEAD -- \"$file\")^ -- \"$file\"\n</code></pre>"},{"location":"developer/git/tweaks/#number-of-commits-per-day-in-a-git-repo","title":"Number of commits per day in a git repo","text":"<pre><code>git log | grep Date | awk '{print \" : \"$4\" \"$3\" \"$6}' | uniq -c\n</code></pre>"},{"location":"developer/git/tweaks/#remove-git-branches-that-do-not-have-a-rmote-tracking-branch-anymore","title":"Remove git branches that do not have a rmote tracking branch anymore","text":"<pre><code>git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 &lt;(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d\n</code></pre>"},{"location":"developer/git/tweaks/#remove-git-dirs","title":"Remove .git dirs","text":"<pre><code>find . -name \".git\" -type d -exec rm -rf {} \\;\n</code></pre>"},{"location":"developer/git/tweaks/#top-ten-of-the-most-active-committers-in-git-repositories","title":"Top Ten of the most active committers in git repositories","text":"<pre><code>git shortlog -s | sort -rn | head\n</code></pre>"},{"location":"developer/git/tweaks/#git-create-a-local-branch-that-tracks-with-the-remote-branch","title":"git - create a local branch that tracks with the remote branch","text":"<pre><code>git checkout -tb mybranch origin/mybranch\n</code></pre>"},{"location":"developer/git/tweaks/#prints-per-line-contribution-per-author-for-a-git-repository","title":"Prints per-line contribution per author for a GIT repository","text":"<pre><code>git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr\n</code></pre>"},{"location":"developer/git/tweaks/#git-tree-command-with-color-and-tagbranch-name","title":"Git Tree Command with color and tag/branch name","text":"<pre><code>git log --graph --oneline --all --decorate --color\n</code></pre>"},{"location":"developer/git/tweaks/#open-the-current-project-on-github-by-typing-gh","title":"Open the current project on Github by typing gh","text":"<pre><code>git remote -v | grep fetch | sed 's/\\(.*github.com\\)[:|/]\\(.*\\).git (fetch)/\\2/' | awk {'print \"https://github.com/\" $1'} | xargs open\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-branches-by-date-useful-for-showing-active-branches_1","title":"Show git branches by date - useful for showing active branches","text":"<pre><code>for k in $(git branch | sed /\\*/d); do echo \"$(git log -1 --pretty=format:\"%ct\" $k) $k\"; done | sort -r | awk '{print $2}'\n</code></pre>"},{"location":"developer/git/tweaks/#update-pull-commits-from-all-submodules","title":"Update (pull commits from) all submodules","text":"<pre><code>git submodule foreach git pull --ff-only origin master\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator-whatthecommitcom","title":"commit message generator - whatthecommit.com","text":"<pre><code>curl http://whatthecommit.com/index.txt\n</code></pre>"},{"location":"developer/git/tweaks/#create-tarball-of-files-modified-in-git","title":"Create tarball of files modified in git","text":"<pre><code>tar czf git_mods_circa_dec23.tgz --files-from &lt;(git ls-files -m)\n</code></pre>"},{"location":"developer/git/tweaks/#sequential-revision-numbers-in-git","title":"Sequential revision numbers in Git","text":"<pre><code>git rev-list --reverse HEAD | awk \"/$(git log -n 1 --pretty=\"format:%h\")/ {print NR}\"\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator-whatthecommitcom_1","title":"commit message generator - whatthecommit.com","text":"<pre><code>curl -s 'http://whatthecommit.com/' | grep '&lt;p&gt;' | cut -c4-\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-branches-by-date-useful-for-showing-active-branches_2","title":"Show git branches by date - useful for showing active branches","text":"<pre><code>for k in `git branch|sed s/^..//`;do echo -e `git log -1 --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" \"$k\" --`\\\\t\"$k\";done|sort\n</code></pre>"},{"location":"developer/git/tweaks/#git-output-remote-origin-from-within-a-local-repository","title":"git Output remote origin from within a local repository","text":"<pre><code>git config --local --get remote.origin.url\n</code></pre>"},{"location":"developer/git/tweaks/#delete-local-and-remote-git-repos-if-merged-into-local-master","title":"delete local and remote git repos if merged into local master","text":"<pre><code>git branch | cut -c3- | grep -v \"^master$\" | while read line; do git branch -d $line; done | grep 'Deleted branch' | awk '{print $3;}' | while read line; do git push &lt;target_remote&gt; :$line; done\n</code></pre>"},{"location":"developer/git/tweaks/#using-git-stage-all-manually-deleted-files","title":"Using Git, stage all manually deleted files.","text":"<pre><code>git add -u\n</code></pre>"},{"location":"developer/git/tweaks/#pull-git-submodules-in-parallel-using-gnu-parallel","title":"Pull git submodules in parallel using GNU parallel","text":"<pre><code>parallel -j4 cd {}\\; pwd\\; git pull :::: &lt;(git submodule status | awk '{print $2}')\n</code></pre>"},{"location":"developer/git/tweaks/#bash-script-to-zip-a-folder-while-ignoring-git-files-and-copying-it-to-dropbox","title":"bash script to zip a folder while ignoring git files and copying it to dropbox","text":"<pre><code>git archive HEAD | gzip &gt; ~/Dropbox/archive.tar.gz\n</code></pre>"},{"location":"developer/git/tweaks/#push-each-of-your-local-git-branches-to-the-remote-repository","title":"Push each of your local git branches to the remote repository","text":"<pre><code>git push origin --all\n</code></pre>"},{"location":"developer/git/tweaks/#deleting-a-remote-git-branch-say-by-name-featureless","title":"Deleting a remote git branch (say, by name 'featureless')","text":"<pre><code>git push origin :featureless\n</code></pre>"},{"location":"developer/git/tweaks/#git-rm-for-all-deleted-files-including-those-with-spacequoteunprintable-characters-in-their-filenamepath","title":"git-rm for all deleted files, including those with space/quote/unprintable characters in their filename/path","text":"<pre><code>git ls-files -z -d | xargs -0 git rm --\n</code></pre>"},{"location":"developer/git/tweaks/#git-list-unpushed-commits","title":"GIT: list unpushed commits","text":"<pre><code>git log --oneline &lt;REMOTE&gt;..&lt;LOCAL BRANCH&gt;\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator-whatthecommitcom_2","title":"commit message generator - whatthecommit.com","text":"<pre><code>lynx -dump -nolist http://whatthecommit.com/|sed -n 2p\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator-whatthecommitcom_3","title":"commit message generator - whatthecommit.com","text":"<pre><code>curl -s http://whatthecommit.com | html2text | sed '$d'\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator-whatthecommitcom_4","title":"commit message generator - whatthecommit.com","text":"<pre><code>curl -s http://whatthecommit.com | sed -n '/&lt;p&gt;/,/&lt;\\/p&gt;/p' | sed '$d' | sed 's/&lt;p&gt;//'\n</code></pre>"},{"location":"developer/git/tweaks/#telling-you-from-where-your-commit-come-from","title":"telling you from where your commit come from","text":"<pre><code>function where(){ COUNT=0; while [ `where_arg $1~$COUNT | wc -w` == 0 ]; do let COUNT=COUNT+1; done; echo \"$1 is ahead of \"; where_arg $1~$COUNT; echo \"by $COUNT commits\";};function where_arg(){ git log $@ --decorate -1 | head -n1 | cut -d ' ' -f3- ;}\n</code></pre>"},{"location":"developer/git/tweaks/#show-the-changed-files-in-your-git-repo","title":"Show the changed files in your GIT repo","text":"<pre><code>git status | perl -F'\\s' -nale 'BEGIN { $a = 0 }; $a = 1 if $_ =~ /changed but not updated/i; print $F[-1] if ( $a &amp;&amp; -f $F[-1] )'\n</code></pre>"},{"location":"developer/git/tweaks/#search-git-repo-for-specified-string","title":"Search git repo for specified string","text":"<pre><code>git grep \"search for something\" $(git log -g --pretty=format:%h -S\"search for something\")\n</code></pre>"},{"location":"developer/git/tweaks/#get-first-git-commit-hash","title":"Get first Git commit hash","text":"<pre><code>git log --pretty=format:%H | tail -1\n</code></pre>"},{"location":"developer/git/tweaks/#get-first-git-commit-hash_1","title":"Get first Git commit hash","text":"<pre><code>git log --format=%H | tail -1\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-authors-of-a-particular-git-project","title":"List all authors of a particular git project","text":"<pre><code>git log --format='%aN &lt;%aE&gt;' | awk '{arr[$0]++} END{for (i in arr){print arr[i], i;}}' | sort -rn | cut -d\\  -f2-\n</code></pre>"},{"location":"developer/git/tweaks/#see-all-the-commits-for-which-searchstring-appear-in-the-git-diff","title":"See all the commits for which searchstring appear in the git diff","text":"<pre><code>git log -p -z | perl -ln0e 'print if /[+-].*searchedstring/'\n</code></pre>"},{"location":"developer/git/tweaks/#list-every-file-that-has-ever-existed-in-a-git-repository","title":"List every file that has ever existed in a git repository","text":"<pre><code>git log --all --pretty=format:\" \" --name-only | sort -u\n</code></pre>"},{"location":"developer/git/tweaks/#git-pull-all-repos","title":"git pull all repos","text":"<pre><code>find ~ -maxdepth 2 -name .git -print | while read repo; do cd $(dirname $repo); git pull; done\n</code></pre>"},{"location":"developer/git/tweaks/#add-gitignore-files-to-all-empty-directories-recursively-from-your-current-directory","title":"Add .gitignore files to all empty directories recursively from your current directory","text":"<pre><code>find . \\( -type d -empty \\) -and \\( -not -regex ./\\.git.* \\) -exec touch {}/.gitignore \\;\n</code></pre>"},{"location":"developer/git/tweaks/#display-condensed-log-in-a-tree-like-format","title":"Display condensed log  in a tree-like format.","text":"<pre><code>git log --graph --pretty=oneline --decorate\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-authors-of-a-particular-git-project_1","title":"List all authors of a particular git project","text":"<pre><code>git log --format='%aN' | sort -u\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-authors-of-a-particular-git-project_2","title":"List all authors of a particular git project","text":"<pre><code>git shortlog -s | cut -c8-\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-branches-by-date-useful-for-showing-active-branches_3","title":"Show git branches by date - useful for showing active branches","text":"<pre><code>for k in `git branch|sed s/^..//`;do echo -e `git log -1 --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" \"$k\"`\\\\t\"$k\";done|sort\n</code></pre>"},{"location":"developer/git/tweaks/#move-all-files-untracked-by-git-into-a-directory","title":"Move all files untracked by git into a directory","text":"<pre><code>git clean -n | sed 's/Would remove //; /Would not remove/d;' | xargs mv -t stuff/\n</code></pre>"},{"location":"developer/git/tweaks/#prints-per-line-contribution-per-author-for-a-git-repository_1","title":"Prints per-line contribution per author for a GIT repository","text":"<pre><code>git ls-files | while read i; do git blame $i | sed -e 's/^[^(]*(//' -e 's/^\\([^[:digit:]]*\\)[[:space:]]\\+[[:digit:]].*/\\1/'; done | sort | uniq -ic | sort -nr\n</code></pre>"},{"location":"developer/git/tweaks/#prints-per-line-contribution-per-author-for-a-git-repository_2","title":"Prints per-line contribution per author for a GIT repository","text":"<pre><code>git ls-files | xargs -n1 -d'\\n' -i git-blame {} | perl -n -e '/\\s\\((.*?)\\s[0-9]{4}/ &amp;&amp; print \"$1\\n\"' | sort -f | uniq -c -w3 | sort -r\n</code></pre>"},{"location":"developer/git/tweaks/#makes-a-project-directory-unless-it-exists-changes-into-the-dir-and-creates-an-empty-git-repository-all-in-one-command","title":"Makes a project directory, unless it exists; changes into the dir, and creates an empty git repository, all in one command","text":"<pre><code>gitstart () { if ! [[ -d \"$@\" ]]; then mkdir -p \"$@\" &amp;&amp; cd \"$@\" &amp;&amp; git init; else cd \"$@\" &amp;&amp; git init; fi }\n</code></pre>"},{"location":"developer/git/tweaks/#git-revert-files-with-changed-mode-not-content","title":"git Revert files with changed mode, not content","text":"<pre><code>git diff --numstat | awk '{if ($1 == \"0\" &amp;&amp; $2 == \"0\") print $3}'  | xargs git checkout HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#show-changed-files-ignoring-permission-date-and-whitespace-changes","title":"Show changed files, ignoring permission, date and whitespace changes","text":"<pre><code>git diff --numstat -w --no-abbrev | perl -a -ne '$F[0] != 0 &amp;&amp; $F[1] !=0 &amp;&amp; print $F[2] . \"\\n\";'\n</code></pre>"},{"location":"developer/git/tweaks/#show-only-list-of-files-changed-by-commit","title":"Show (only) list of files changed by commit","text":"<pre><code>git show --relative --pretty=format:'' --name-only HASH\n</code></pre>"},{"location":"developer/git/tweaks/#stage-only-portions-of-the-changes-to-a-file","title":"Stage only portions of the changes to a file.","text":"<pre><code>git add --patch &lt;filename&gt;\n</code></pre>"},{"location":"developer/git/tweaks/#show-log-message-including-which-files-changed-for-a-given-commit-in-git","title":"Show log message including which files changed for a given commit in git.","text":"<pre><code>git --no-pager whatchanged -1 --pretty=medium &lt;commit_hash&gt;\n</code></pre>"},{"location":"developer/git/tweaks/#search-string-in-all-revisions","title":"search string in all revisions","text":"<pre><code>for i in `git log --all --oneline --format=%h`; do git grep SOME_STRING $i; done\n</code></pre>"},{"location":"developer/git/tweaks/#git-remove-files-which-have-been-deleted","title":"git remove files which have been deleted","text":"<pre><code>git ls-files -z --deleted | xargs -0 git rm\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-branches-by-date-useful-for-showing-active-branches_4","title":"Show git branches by date - useful for showing active branches","text":"<pre><code>for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k|head -n 1`\\\\t$k;done|sort -r\n</code></pre>"},{"location":"developer/git/tweaks/#add-forgotten-changes-to-the-last-git-commit","title":"add forgotten changes to the last git commit","text":"<pre><code>git commit --amend\n</code></pre>"},{"location":"developer/git/tweaks/#git-remove-files-which-have-been-deleted_1","title":"git remove files which have been deleted","text":"<pre><code>git rm $(git ls-files --deleted)\n</code></pre>"},{"location":"developer/git/tweaks/#git-diff-of-files-that-have-been-staged-ie-git-added","title":"git diff of files that have been staged ie 'git add'ed","text":"<pre><code>git diff --cached\n</code></pre>"},{"location":"developer/git/tweaks/#add-untrackedchanged-items-to-a-git-repository-before-doing-a-commit-andor-sending-upstream","title":"add untracked/changed items to a git repository before doing a commit and/or sending upstream","text":"<pre><code>git status|awk '/modified:/ { printf(\"git add %s\\n\",$3) }; NF ==2 { printf(\"git add %s\\n\",$2) }'|sh\n</code></pre>"},{"location":"developer/git/tweaks/#better-git-diff-word-delimited-and-colorized","title":"Better git diff, word delimited and colorized","text":"<pre><code>git config alias.dcolor \"diff --color-words\"\n</code></pre>"},{"location":"developer/git/tweaks/#better-git-diff-word-delimited-and-colorized_1","title":"Better git diff, word delimited and colorized","text":"<pre><code>git diff -U10|dwdiff --diff-input -c|less -R\n</code></pre>"},{"location":"developer/git/tweaks/#better-git-diff-word-delimited-and-colorized_2","title":"Better git diff, word delimited and colorized","text":"<pre><code>git diff -U10 |wdiff --diff-input -a -n -w $'\\e[1;91m' -x $'\\e[0m' -y $'\\e[1;94m' -z $'\\e[0m' |less -R\n</code></pre>"},{"location":"developer/git/tweaks/#count-git-commits-since-specific-commit","title":"Count git commits since specific commit","text":"<pre><code>git log --pretty=oneline b56b83.. | wc -l\n</code></pre>"},{"location":"developer/git/tweaks/#count-git-commits-since-specific-commit_1","title":"Count git commits since specific commit","text":"<pre><code>git log --summary 223286b.. | grep 'Author:' | wc -l\n</code></pre>"},{"location":"developer/git/tweaks/#execute-git-submodule-update-in-parallel-with-xargs","title":"Execute git submodule update in parallel with xargs","text":"<pre><code>git submodule status | awk '{print $2}' | xargs -P5 -n1 git submodule update --init\n</code></pre>"},{"location":"developer/git/tweaks/#incorporating-a-finished-feature-on-develop","title":"Incorporating a finished feature on develop","text":"<pre><code>git checkout develop; git merge --no-ff myfeature\n</code></pre>"},{"location":"developer/git/tweaks/#creating-a-feature-branch","title":"Creating a feature branch","text":"<pre><code>git checkout -b myfeature develop\n</code></pre>"},{"location":"developer/git/tweaks/#my-git-tree-command","title":"My Git Tree Command!","text":"<pre><code>git log --graph --oneline --all\n</code></pre>"},{"location":"developer/git/tweaks/#show-git-logging","title":"show git logging","text":"<pre><code>git log --stat\n</code></pre>"},{"location":"developer/git/tweaks/#create-a-git-archive-of-the-latest-commit-with-revision-number-as-name-of-file","title":"Create a git archive of the latest commit with revision number as name of file","text":"<pre><code>git archive HEAD --format=zip -o `git rev-parse HEAD`.zip\n</code></pre>"},{"location":"developer/git/tweaks/#list-files-under-current-directory-ignoring-repository-copies","title":"List files under current directory, ignoring repository copies.","text":"<pre><code>function have_here { find \"${@:-.}\" -type d \\( -name .git -o -name .svn -o -name .bzr -o -name CVS -o -name .hg -o -name __pycache__ \\) -prune -o -type f -print; }\n</code></pre>"},{"location":"developer/git/tweaks/#revert-the-unstaged-modifications-in-a-git-working-directory","title":"revert the unstaged modifications in a git working directory","text":"<pre><code>git diff | git apply --reverse\n</code></pre>"},{"location":"developer/git/tweaks/#commit-message-generator","title":"commit message generator","text":"<pre><code>curl -s http://whatthecommit.com/ | tr -s '\\n' ' ' | grep -so 'p&gt;\\(.*\\)&lt;/p' | sed -n 's/..\\(.*\\)..../\\1/p'\n</code></pre>"},{"location":"developer/git/tweaks/#random-git-commit-message","title":"random git commit message","text":"<pre><code>git-random(){ gitRan=$(curl -L -s http://whatthecommit.com/ |grep -A 1 \"\\\"c\" |tail -1 |sed  's/&lt;p&gt;//'); git commit -m \"$gitRan\"; }\n</code></pre>"},{"location":"developer/git/tweaks/#rename-a-branch","title":"rename a branch","text":"<pre><code>git branch -m old_branch new_branch\n</code></pre>"},{"location":"developer/git/tweaks/#set-upstream-for-existing-branch","title":"set upstream for existing branch","text":"<pre><code>git branch --set-upstream &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;\n</code></pre>"},{"location":"developer/git/tweaks/#checkout-remote-branch","title":"checkout remote branch","text":"<pre><code>git checkout -b test origin/test\n</code></pre>"},{"location":"developer/git/tweaks/#pretty-git-commit-log","title":"pretty git commit log","text":"<pre><code>git log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short\n</code></pre>"},{"location":"developer/git/tweaks/#make-git-head-same-as-originmaster","title":"make git HEAD same as origin/master","text":"<pre><code>git reset --hard origin/master\n</code></pre>"},{"location":"developer/git/tweaks/#delete-a-remote-branch_1","title":"delete a remote branch","text":"<pre><code>git push origin :heads/branch_name\n</code></pre>"},{"location":"developer/git/tweaks/#revert-uncommited-git-changes","title":"revert uncommited git changes","text":"<pre><code>git reset --hard HEAD\n</code></pre>"},{"location":"developer/git/tweaks/#add-gitignore-to-enable-add-empty-directory-to-git","title":"add .gitignore to enable add empty directory to git","text":"<pre><code>for i in $(find . -type d -regex ``./[^.].*'' -empty); do touch $i\"/.gitignore\"; done;\n</code></pre>"},{"location":"developer/git/tweaks/#list-files-between-git-commits","title":"list files between git commits","text":"<pre><code>git diff --name-only 4ce07ee 7cdf78b\n</code></pre>"},{"location":"developer/git/tweaks/#list-all-branches","title":"list all branches","text":"<pre><code>git branch -a\n</code></pre>"},{"location":"developer/git/tweaks/#install-a-new-git-repo","title":"install a new git repo","text":"<pre><code>function gitinstall(){ git init; git remote add origin \"$@\"; git config branch.master.remote origin; git config branch.master.merge refs/heads/master; git pull;}\n</code></pre>"},{"location":"developer/git/tweaks/#git-recursive-rm","title":"git recursive rm","text":"<pre><code>git ls-files -d -z | xargs -0 git update-index --remove\n</code></pre>"},{"location":"developer/git/tweaks/#undo-last-git-commit","title":"undo last git commit","text":"<pre><code>git reset --soft HEAD^\n</code></pre>"},{"location":"developer/git/tweaks/#find-deleted-stashes-and-other-lost-commits-in-git","title":"find deleted stashes and other lost commits in git","text":"<pre><code>git fsck --no-reflog | awk '/dangling commit/ {print $3}'\n</code></pre>"},{"location":"developer/git/tweaks/#git-apply-patch","title":"git apply patch","text":"<pre><code>git format-patch -k --stdout rev1-1..rev2 | git am -k -3\n</code></pre>"},{"location":"developer/git/tweaks/#git-cat","title":"git cat","text":"<pre><code>git cat-file -p $(git ls-tree $1 \"$2\" | cut -d \" \" -f 3 | cut -f 1)\n</code></pre>"},{"location":"developer/git/tweaks/#list-unmerged-files","title":"list unmerged files","text":"<pre><code>git ls-files -u|awk '{print $4}'|sort -u\n</code></pre>"},{"location":"developer/git/tweaks/#list-added-files-in-the-index","title":"list added files in the index","text":"<pre><code>git diff-index HEAD|awk '{print $5 \" \" $6}'|sed -n -e's/^A //p'\n</code></pre>"},{"location":"developer/git/tweaks/#print-number-of-modified-files","title":"print number of modified files","text":"<pre><code>git status --porcelain | cut -c 1-2 | grep M | wc -l | tr -d \" \"\n</code></pre>"},{"location":"developer/git/tweaks/#show-all-remote-git-branches","title":"show all remote git branches","text":"<pre><code>git remote show origin\n</code></pre>"},{"location":"developer/git/tweaks/#fancy-git-prompt","title":"fancy git prompt","text":"<pre><code>parse_git_branch() {git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/(git::\\1)/'}\n\nexport PS1=\"\\[\\033]0;\\h \\w \\$(parse_git_branch) \\007\\][\\[\\033[01;35m\\]\\h \\[\\033[01;34m\\]\\w \\[\\033[31m\\]\\$(parse_git_branch)\\[\\033[00m\\]]$ \"\n</code></pre>"},{"location":"developer/git/tweaks/#recursively-remove-all-untracked-files-in-the-tree","title":"Recursively remove all untracked files in the tree.","text":"<pre><code>git clean -f\n</code></pre>"},{"location":"developer/git/tweaks/#throw-out-all-of-your-changes-to-existing-files-but-not-new-ones","title":"throw out all of your changes to existing files, but not new ones","text":"<pre><code>git reset --hard\n</code></pre>"},{"location":"developer/git/tweaks/#remove-file-from-staging-area","title":"remove file from staging area","text":"<pre><code>git rm --cached [file]\n</code></pre>"},{"location":"developer/git/tweaks/#see-diff-of-files-in-staging-area","title":"see diff of files in staging area","text":"<pre><code>git diff --staged\n</code></pre>"},{"location":"developer/git/tweaks/#see-tracked-files","title":"see tracked files","text":"<pre><code>git ls-files\n</code></pre>"},{"location":"developer/git/tweaks/#see-a-branch-graph","title":"see a branch graph","text":"<pre><code>git log --graph\n</code></pre>"},{"location":"developer/git/tweaks/#see-all-tags","title":"see all tags","text":"<pre><code>git tag\n</code></pre>"},{"location":"developer/git/tweaks/#see-list-of-deleted-files","title":"see list of deleted files","text":"<pre><code>git ls-files -d\n</code></pre>"},{"location":"developer/git/tweaks/#restore-all-deleted-files","title":"restore all deleted files","text":"<pre><code>git ls-files -d | xargs git checkout --\n</code></pre>"},{"location":"developer/git/tweaks/#view-commits-not-yet-pushed-to-remote","title":"view commits not yet pushed to remote","text":"<pre><code>git log --branches --not --remotes\n</code></pre>"},{"location":"developer/git/tweaks/#difference-between-two-branches","title":"difference between two branches","text":"<pre><code>git diff --stat --color master..branch\n</code></pre>"},{"location":"developer/git/tweaks/#see-a-list-of-all-objects","title":"see a list of all objects","text":"<pre><code>git rev-list --objects --all\n</code></pre>"},{"location":"developer/git/tweaks/#remove-file-from-index","title":"remove file from index","text":"<pre><code>git rm --cached filename.txt\n</code></pre>"},{"location":"notes/float_32-to-binary/","title":"float_32 to binary conversion","text":""},{"location":"notes/float_32-to-binary/#for-example","title":"For example:","text":"<p>The size of <code>union</code> is the size of one of the largest member element</p> Simple C++ union example<pre><code>    :\nunion point_t {\n    int i;\n    char c;\n    float f;\n};\n    :\n    :\npoint_t point;\npoint.i = 65;\nstd::cout &lt;&lt; \"i: \" &lt;&lt; point.i &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"c: \" &lt;&lt; point.c &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"f: \" &lt;&lt; point.f &lt;&lt; std::endl;\n    :\n    :\n</code></pre>"},{"location":"notes/float_32-to-binary/#output","title":"Output:","text":"<pre><code>i: 65\nc: A\nf: 9.10844e-44\n</code></pre> <ul> <li><code>f</code> value looks like garbage</li> <li>The big one in <code>point_t</code> is float. So, the <code>sizeof(point_t) = 32</code></li> </ul>"},{"location":"notes/float_32-to-binary/#float_32-memory-layout","title":"<code>float_32</code> memory layout","text":"<p>Info</p> <p> <code>1 bit -&gt; Sign</code></p> <p> <code>8 bits -&gt; Int part (Exponent)</code></p> <p> <code>23 bits -&gt; Decimal part (Significand/Mantissa)</code></p>"},{"location":"notes/float_32-to-binary/#how-to-convert","title":"How to convert","text":"Converting (+98.569)<sub>10</sub> to (xxxx)<sub>2</sub><pre><code> Bit\n Position\n      ---\n       32: 0 # positive number\n[31 - 24]: 01100010 # 98 binary\n       23: 0.569 * 2 = 1.138\n       22: 0.138 * 2 = 0.276\n       21: 0.276 * 2 = 0.552\n       20: 0.552 * 2 = 1.104\n       19: 0.104 * 2 = 0.208\n       18: 0.416 * 2 = 0.832\n       17: 0.832 * 2 = 1.664\n       16: 0.664 * 2 = 1.328\n       15: 0.328 * 2 = 0.656\n       14: 0.656 * 2 = 1.312\n       13: 0.312 * 2 = 0.624\n       12: 0.624 * 2 = 1.248\n       11: 0.248 * 2 = 0.496\n       10: 0.496 * 2 = 0.992\n       09: 0.992 * 2 = 1.984\n       08: 0.984 * 2 = 1.968\n       07: 0.968 * 2 = 1.936\n       06: 0.936 * 2 = 1.872\n       05: 0.872 * 2 = 1.744\n       04: 0.744 * 2 = 1.488\n       03: 0.488 * 2 = 0.976\n       02: 0.976 * 2 = 0.952\n       00: 0.952 * 2 = 1.904\n# No more bits\n</code></pre> <pre><code>Collect all exponents (1 and 0) from multiplication\n\n        .569 = 10010011010100111111001\n\nFinal Binary = 0|01100010|10010011010100111111001\n</code></pre>"}]}